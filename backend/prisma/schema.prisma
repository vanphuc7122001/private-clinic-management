generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id         String   @id @default(uuid())
  name       String   @unique
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
}

model User {
  id                    String   @id @default(uuid())
  name                  String   @db.VarChar(100)
  gender                String   @db.VarChar(20)
  avatar                String?  @db.VarChar(200)
  address               String   @db.VarChar(200)
  phone                 String   @db.VarChar(20)
  email                 String?  @unique @db.VarChar(100)
  password              String?  @db.VarChar(200)
  is_patient            Boolean  @default(true)
  forgot_password_token String?  @db.Text
  date_of_birth         DateTime @default(now())
  role_id               String
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  roles Role @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  news               News[]
  appointmentDoctor  Appointment[]    @relation("appointment_doctor")
  appointmentPatient Appointment[]    @relation("appointment_patient")
  staffSchedule      StaffSchedules[] @relation("staff_schedules")
  doctorProfile      DoctorProfile?   @relation("doctor_profiles")

  refreshToken RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @db.Text
  user_id    String   @db.VarChar(200)
  exp        DateTime
  iat        DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String?

  @@map("refresh_tokens")
}

model MedicalRecord {
  id             String  @id @default(uuid())
  diagnosis      String  @db.VarChar(1000)
  note           String  @db.VarChar(1000)
  appointment_id String? @unique @db.VarChar(200)

  prescription Prescriptions?         @relation("prescription_medical_record")
  bill         Bill?                  @relation("bill_medical_record")
  services     MedicalRecordService[]
  appointments Appointment?           @relation(name: "appointment_medical_record", fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("medical_records")
}

model Service {
  id    String @id @default(uuid())
  name  String @db.VarChar(200)
  price String @db.VarChar(200)

  medicalRecordServices MedicalRecordService[]
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt

  @@map("services")
}

model MedicalRecordService {
  medical_record_id String
  service_id        String

  medicalRecord MedicalRecord @relation(fields: [medical_record_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  service       Service       @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([medical_record_id, service_id])
  @@map("medical_record_services")
}

model Category {
  id   String @id @default(uuid())
  name String
  news News[] @relation("category")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("categories")
}

model News {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(200)
  images      String   @db.VarChar(200)
  description String   @db.Text
  content     String   @db.Text
  user_id     String   @db.VarChar(200)
  category_id String   @db.VarChar(200)
  status      Boolean
  category    Category @relation(name: "category", fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("news")
}

model Appointment {
  id         String   @id @default(uuid())
  date       DateTime
  doctor_id  String   @db.VarChar(200)
  patient_id String   @db.VarChar(200)
  status     String

  patient       User           @relation(name: "appointment_patient", fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctor        User           @relation(name: "appointment_doctor", fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  medicalRecord MedicalRecord? @relation(name: "appointment_medical_record")

  @@map("appointments")
}

model StaffSchedules {
  id       String   @id @default(uuid())
  date     DateTime @db.Date
  staff_id String   @db.VarChar(200)
  shift    String   @db.VarChar(200)
  note     String?  @db.VarChar(200)

  user       User     @relation(name: "staff_schedules", fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("staff_schedules")
}

model DoctorProfile {
  doctor_id     String @unique @db.VarChar(200)
  certification String @db.VarChar(200)
  expricence    String @db.VarChar(200)
  education     String @db.VarChar(200)

  doctor     User     @relation(name: "doctor_profiles", fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([doctor_id])
  @@map("doctor_profiles")
}

model Bill {
  id                String @id @default(uuid())
  medical_record_id String @unique @db.VarChar(200)
  status            String
  amount            String @db.VarChar(200)

  medicalRecord MedicalRecord @relation(name: "bill_medical_record", fields: [medical_record_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  @@map("bills")
}

model Prescriptions {
  id                String @id @default(uuid())
  medical_record_id String @unique

  medicalRecord       MedicalRecord         @relation(name: "prescription_medical_record", fields: [medical_record_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  prescriptionsDetail PrescriptionsDetail[] @relation("prescriptions_detail's")
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt

  @@map("prescriptions")
}

model Medicines {
  id             String @id @default(uuid())
  name           String @db.VarChar(200)
  manufacturer   String @db.VarChar(200)
  usage          String @db.VarChar(200)
  quantity       String @db.VarChar(200)
  price          String @db.VarChar(200)
  purchase_price String @db.VarChar(200)

  prescriptionsDetailMedicine PrescriptionsDetail[] @relation("prescriptions_detail_medicine")
  created_at                  DateTime              @default(now())
  updated_at                  DateTime              @updatedAt

  @@map("medicines")
}

model PrescriptionsDetail {
  prescription_id String @db.VarChar(200)
  medicine_id     String @db.VarChar(200)
  dosage          String @db.VarChar(200)
  quantity        Int

  prescriptions Prescriptions @relation(name: "prescriptions_detail's", fields: [prescription_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  medicines     Medicines     @relation(name: "prescriptions_detail_medicine", fields: [medicine_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  @@id([prescription_id, medicine_id])
  @@map("prescription_details")
}
